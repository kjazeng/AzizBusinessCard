rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Users can read and write their own documents
    match /users/{userId} {
      allow read: if true; // Public read for user profiles
      allow write: if isOwner(userId);
    }

    // Business cards can be read by anyone, but only created and edited by their owner
    match /businessCards/{cardId} {
      allow read: if true; // Public read
      allow create: if isAuthenticated() && request.resource.data.ownerId == request.auth.uid;
      allow update, delete: if isAuthenticated() && resource.data.ownerId == request.auth.uid;

      // Ensure required fields are present
      function hasRequiredFields() {
        return request.resource.data.keys().hasAll(['name', 'title', 'email', 'phone', 'ownerId', 'createdAt']);
      }

      // Additional validation for create and update
      allow create: if hasRequiredFields();
      allow update: if hasRequiredFields();
    }

    // Bee notes can only be created and edited by their owner
    match /beeNotes/{noteId} {
      allow read, write: if isOwner(resource.data.ownerId);
    }

    // Bee tagged cards can be created and read by authenticated users
    match /beeTagged/{tagId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isOwner(resource.data.userId);
    }

    // Liked cards can be read, created, and deleted by the user who liked them
    match /users/{userId}/likedCards/{cardId} {
      allow read, write: if isOwner(userId);
    }
  }
}